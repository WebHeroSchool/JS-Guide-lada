# JavaScript Style Guide.
### 1. Отступы.
Существует два типа отступов:

**Горизонтальные отступы: два или четыре пробела.**

Горизонтальный отступ выполняется с помощью 2 или 4 пробелов, или символа табуляции (клавиша Tab).

Хорошо:
```
let request = (href) => {
  let userName = href.split('=');
  if (userName[1]) {
    username = userName[1];
  } else {
    username = 'ladariugina'
  }
  return username;
}
```
Плохо:
```
let request = (href) => {
let userName = href.split('=');
if (userName[1]) {
username = userName[1];
} else {
username = 'ladariugina'
}
return username;
}
```

**Вертикальные отступы: пустые строки для разбивки кода на «логические блоки».**

Между логическими блоками (циклами, функциями и т.д.) следует оставлять пустую строку. Это делает код более читабельным. Избегайте блоков кода более 9 строк подряд.

Хорошо:
```
function pow(x, n) {
  let result = 1;
  //              <--
  for (let i = 0; i < n; i++) {
    result *= x;
  }
  //              <--
  return result;
}
```
Плохо:
```
let userUrl = document.createElement('a');
if (json.name != null) {
  userUrl.href = json.html_url;
  userUrl.innerHTML = json.name;
} else {
  userUrl.innerHTML = 'Error. No name.'
}
body.append(userUrl);
let userBio = document.createElement('p');
if (json.bio != null) {
  userBio.innerHTML = json.bio;
} else {
  userBio.innerHTML = 'Error. No bio.'
 }
body.append(userBio);
```
### 2. Переменные.
Для именования переменных используйте существительные на английском языке(не транслит!). Имя переменной должно быть осмысленным.

Имя может состоять из букв, цифр, символов $ и _, не должно начинаться с цифры.

Хорошо:
```
const userName;
```
Плохо:
```
const oOoooO;
const nameee;
const imya;
```
Всегда используйте var, let или const для объявления переменных.
 
В противном случае переменная будет объявлена глобальной. Загрязнение глобального пространства имен — всегда плохо.
Хорошо:
```
var superPower = new SuperPower();
```
Плохо:
```
superPower = new SuperPower();
```

### 3. Пробелы.
+ Используйте пробелы между параметрами и не используйте между именем функции и скобкой.

Хорошо:
```
function edit(name, age) {
  // тело функции
}
```
Плохо:
```
function edit (name,age) {
  // тело функции
}
```
+ При создании анонимной функции необходимо использовать пробел перед скобкой.

Хорошо:
```
function (name, age) {
  // тело функции
}
```
Плохо:
```
function(name,age) {
  // тело функции
}
```
+ Используйте пробелы вокруг операторов.

Хорошо:
```
if (age < 100) {
  // тело цикла
}
```
Плохо:
```
if (age<100) {
  // тело цикла
}
```
### 4. Скобки.
Открывающая фигурная скобка располагается на той же строке. Перед скобкой пробел. Закрывающая скобка располагается на новой строке.

Хорошо:
```
function edit(name, age) {
  if (age < 100) {
    // тело цикла
  }
}
```
Плохо:
```
function edit(name, age)
{
  if (age < 100) {/*тело цикла*/}
}
```
### 5. Кавычки.
Всегда в коде скрипта используйте одинарные кавычки, если не требуется иного. Двойные кавычки допустимы, если в этой же строке необходимо использовать апостроф (') или одинарные кавычки для других целей.

Хорошо:
```
var string = 'строка';
var phrase = "you're next";
```
Плохо:
```
var string = "строка";
```
### 6. Точка с запятой.
В конце выражения обязательна точка с запятой.

Хорошо:
```
alert('Привет');
alert('Мир');
```
Плохо:
```
alert('Привет')
alert('Мир')
```
### 7. Запятые.
Нельзя использовать запятые в начале строки.

Хорошо:
```
var once,
    upon,
    aTime;
```
Плохо:
```
var once
  , upon
  , aTime;
```
### 8. Комментарии.
Для пояснения кода используются комментарии. Комментарии не исполняются интерпретатором JavaScript.
+ Однострочные комментарии начинаются с двойного слэша //. За ним обязательно должен идти пробел;
+ Многострочные комментарии располагаются между /* и */. За символом начала комментария обязательно должен идти пробел. Символ конца комментария располагается на новой строке.
Хорошо:
```
/* Пример комментария.
Многострочного комментария.
*/

// Пример однострочного комментария.
```
Плохо:
```
/*Пример комментария.
Многострочного комментария.*/

//Пример однострочного комментария.
```
### 9. Объекты.
Для создания объекта используйте фигурные скобки. Не создавайте объекты через конструктор new Object.
Хорошо:
```
var item = {};
```
Плохо:
```
var item = new Object();
```
### 10. Зарезервированные слова.
Ниже приведён список слов, которые зарезервированы языком. Использовать их в качестве идентификаторов нельзя.

+ break
+ do
+ instanceof
+ typeof
+ case
+ else
+ new
+ var
+ catch
+ finally
+ return
+ void
+ continue
+ for
+ switch
+ while
+ debugger
+ function
+ this
+ with
+ default
+ if
+ throw
+ delete
+ in
+ try
+ class
+ enum
+ extends
+ super
+ const
+ export
+ import
+ implements
+ let
+ private
+ public
+ interface
+ package
+ protected
+ static
+ yield